(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))
;
(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
    (if (empty-queue? queue)
        (error "empty queue" queue)
        (car (front-ptr queue))))
(define (insert-queue! queue item)
    (let ((new-pair (cons item '())))
        (cond ((empty-queue? queue)
               (set-front-ptr! queue new-pair)
               (set-rear-ptr! queue new-pair)
               queue)
              (else
                (set-cdr! (rear-ptr queue) new-pair)
                (set-rear-ptr! queue new-pair)
                queue))))
(define (delete-queue! queue)
    (cond ((empty-queue? queue)
            (error "empty queue" queue))
          (else
            (set-front-ptr! queue (cdr (front-ptr queue)))
            queue)))
;3.21
(define (print-queue queue) (display (front-ptr queue)))
;3.22
(define (make-queue)
    (let ((front-ptr '())
          (rear-ptr '()))
        (define (set-front-ptr! item) (set! front-ptr item))
        (define (set-rear-ptr! item) (set! rear-ptr item))
        (define (empty-queue?) (null? front-ptr))
        (define (front-queue)
            (if (empty-queue?)
                (error "empty-queue" '())
                (car front-ptr)))
        (define (insert-queue! item)
            (let ((new-pair (cons item '())))
                (cond ((empty-queue?)
                       (set-front-ptr! new-pair)
                       (set-rear-ptr! new-pair)
                       front-ptr)
                      (else
                       (set-cdr! rear-ptr new-pair)
                       (set-rear-ptr! new-pair)
                       front-ptr))))
        (define (delete-queue!)
            (set-front-ptr! (cdr front-ptr))
            front-ptr)
        (define (dispatch m)
            (cond ((eq? m 'empty-queue?) (empty-queue?))
                  ((eq? m 'front-queue) (front-queue))
                  ((eq? m 'insert-queue!) insert-queue!)
                  ((eq? m 'delete-queue!) (delete-queue!))
                  (else (error "no such op" m))))
        dispatch))
;3.23
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))
;
(define (empty-deque? deque) (null? (front-ptr deque)))
(define (make-deque) (cons '() '()))
(define (front-deque deque)
    (if (empty-deque? deque)
        (error "empty deque" deque)
        (car (front-ptr deque))))
(define (rear-deque deque)
    (if (empty-deque? deque)
        (error "empty deque" deque)
        (car (rear-ptr deque))))
(define (rear-insert-deque! deque item)
    (let ((new-pair (cons item '())))
        (cond ((empty-deque? deque)
               (set-front-ptr! deque new-pair)
               (set-rear-ptr! deque new-pair)
               deque)
              (else
                (set-cdr! (rear-ptr deque) new-pair)
                (set-rear-ptr! deque new-pair)
                deque))))
(define (front-insert-deque! deque item)
    (let ((new-pair (cons item '())))
        (cond ((empty-deque? deque)
               (set-front-ptr! deque new-pair)
               (set-rear-ptr! deque new-pair)
               deque)
              (else
                (set-cdr! new-pair (front-ptr deque))
                (set-front-ptr! deque new-pair)
                deque))))
(define (front-delete-deque! deque)
    (cond ((empty-deque? deque)
            (error "empty deque" deque))
          (else
            (set-front-ptr! deque (cdr (front-ptr deque)))
            deque)))
(define (rear-delete-deque! deque));该函数要求O(1)复杂度需要修改队列的实现，不想做了。
;
(define (show . s)
    (map (lambda (x) (begin (display x) (newline) x)) s))
(define q (make-queue))
(display ((q 'insert-queue!) 'a))
(display ((q 'insert-queue!) 'b))
(display ((q 'insert-queue!) 'c))
(display (q 'delete-queue!))
(display (q 'front-queue))
(exit)
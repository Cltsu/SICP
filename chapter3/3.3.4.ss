(define (inverter input output)
    (define (invert-input)
        (let ((new-value (logical-not (get-signal input))))
            (after-delay inverter-delay
                         (lambda () (set-signal! output new-value)))))
    (add-action! input invert-input)
    'ok)
(define (and-gate a1 a2 output)
    (define (and-action-procedure)
        (let ((new-value (logical-and (get-signal a1)
                                      (get-signal a2))))
            (after-delay and-gate-delay
                         (lambda () (set-signal! output new-value)))))
    (add-action! a1 and-action-procedure)
    (add-aciton! a2 and-action-procedure)
    'ok)
(define (logical-not s)
    (cond ((= s 1) 0)
          ((= s 0) 1)
          (else (error "Invalid signal" s))))
(define (half-adder a b s c)
    (let ((d (make-wire)) (e (make-wire)))
        (or-gate a b d)
        (and-gate a b c)
        (inverter c e)
        (and-gate d e s)
        'ok))
(define (full-adder a b c-in sum c-out)
    (let ((s (make-wire))
          (c1 (make-wire))
          (c2 (make-wire)))
        (half-adder b c-in s c1)
        (half-adder a s sum c2)
        (or-gate c1 c2 c-out)
        'ok))
;3.28
(define (or-gate o1 o2 output)
    (define (or-action-procedure)
        (let ((new-value (logical-or (get-signal o1)
                                     (get-signal o2))))
            (after-delay or-gate-delay
                         (lambda () (set-signal! output new-value)))))
    (add-action! o1 or-action-procedure)
    (add-action! o2 or-action-procedure)
    'ok)
;3.29
(define (or-gate o1 o2 output)
    (let ((a (make-wire))
          (b (make-wire))
          (c (make-wire)))
        (inverter o1 a)
        (inverter o2 b)
        (and-gate a b c)
        (inverter c output)
        'ok))
;延迟为2 * inverter-delay + and-gate-delay
;3.30
(define (ripple-carry-adder A B S)
    (define (iter A B S cout)
        (let ((cin (make-wire)))
            (set-signal! cin 0)
            (if (null? A)
                'ok
                (full-adder (car A) (car B) cin (car S) cout)
                (iter (cdr A) (cdr B) (cdr s) cin))))
    (iter A B S (make-wire)))
;延迟是n个全加器延迟？
;
;
;
(define (make-wire)
    (let ((signal-value 0) (action-procedure '()))
        (define (set-my-signal! new-value)
            (if (not (= new-value signal-value))
                (begin (set! signal-value new-value)
                       (call-each action-procedure))
                'done))
        (define (accept-action-procedure! proc)
            (set! action-procedure (cons proc action-procedure))
            (proc))
        (define (dispatch m)
            (cond ((eq? m 'get-signal) signal-value)
                  ((eq? m 'set-signal) set-my-signal)
                  ((eq? m 'add-action) accept-action=procedure))
                  (else (error "unkown op" m)))
        dispatch))
(define (call-each procs)
    (if (null? procs)
        'done
        (begin ((car procs))
               (call-each (cdr procedures)))))
(define (get-signal wire)
    (wire 'get-signal))
(define (set-signal! wire)
    (wire 'set-signal!))
(define (add-action! wire proc)
    ((wire 'add-action') proc))
;3.31
;及时更新，保证当前的状态是符合action的
;3.32
(define (show . s)
    (map (lambda (x) (begin (display x) (newline) x)) s))
(display (test 'show))
(exit)
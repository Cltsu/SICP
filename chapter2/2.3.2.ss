(define (variable? x) (symbol? x))
(define (same-variable? v1 v2) 
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
    (and (number? exp) (= exp num)))
(define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (list '+ a1 a2))))
(define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2) (* m1 m2)))
          (else (list '* m1 m2))))
(define (sum? x)
    (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? s)
    (and (pair? s) (eq? (car s) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
;2.56
(define (make-exponentiation b e)
    (cond ((and (number? e) (= e 0)) 1)
          ((and (number? e) (= e 1)) b)
          (else (list '^ b e))))
(define (exponentiation? exp)
    (and (pair? exp) (eq? (car exp) '^)))
(define (base exp) (cadr exp))
(define (exponent exp) (caddr exp))
;2.57
(define (single-var? a)
    (= (length a) 1))
(define (make-sum-mod a1 . a2)
    (if (single-var? a2)
        (make-sum a1 (car a2))
        (cons '+ (cons a1 a2))))
(define (make-product-mod m1 . m2)
    (if (single-var? m2)
        (make-product m1 m2)
        (cons '* (cons a1 a2))))
(define (addend a) (cadr a))
(define (augend a)
    (if (single-var? (cddr a))
        (caddr a)
        (apply make-sum-mod (cddr a))))
(define (multiplier p) (cadr p))
(define (multiplicand a)
    (if (single-var? (cddr a))
        (caddr a)
        (apply make-product-mod (cddr a))))
;2.58
(define (make-sum a1 a2) (list a1 '+ a2))
(define (addend a) (car a))
(define (augend a) (caddr a))
(define (sum? a)
        (pair? a)
        (eq? (cadr a) '+))
(define (make-product m1 m2) (list m1 '* m2))
(define (multiplier m) (car m))
(define (multiplicand m) (caddr m))
(define (product? m)
    (and (pair? m)
         (eq? (cadr m) '*)))
;不可以
;
(define (deriv exp var)
    (cond ((number? exp) 0)
          ((variable? exp)
           (if (same-variable? exp var) 1 0))
          ((sum? exp)
           (make-sum (deriv (addend exp) var)
                     (deriv (augend exp) var)))
          ((product? exp)
           (make-sum
            (make-product (multiplier exp)
                          (deriv (multiplicand exp) var))
            (make-product (multiplicand exp)
                          (deriv (multiplier exp) var))))
          ((exponentiation? exp)
           (make-product
            (make-product (exponent exp)
                          (make-exponentiation (base exp)
                                               (make-sum (exponent exp) -1)))
            (deriv (base exp) var)))
          (else
            (error "unkown expreesion type -- DERIV" exp))))
(define list1 '(this is a list))
(define list2 '(this is a list))
(display
    ; (deriv '(^ (* x y) (+ x 3)) 'x)
    (deriv '(a + (a * a)) 'a))
(exit)
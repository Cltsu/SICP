(define (make-leaf symbol weight)
    (list 'leaf symbol weight))
(define (leaf? object)
    (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (make-code-tree left right)
    (list left 
          right
          (append (symbols left) (symbols right))
          (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
    (if (leaf? tree)
        (list (symbol-leaf tree))
        (caddr tree)))
(define (weight tree)
    (if (leaf? tree)
        (weight-leaf tree)
        (cadddr tree)))
(define (adjoin-set x set)
    (cond ((null? set) (list x))
          ((< (weight x) (weight (car set))) (cons x set))
          (else (cons (car set)
                      (adjoin-set x (cdr set))))))
(define (decode bits tree)
    (define (decode-l bits cur-branch);需要保存根节点，所以开一个子函数
        (if (null? bits) '()
            (let ((next-branch (choose-branch (car bits) cur-branch)))
                (if (leaf? next-branch)
                    (cons (symbol-leaf next-branch)
                          (decode-l (cdr bits) tree))
                    (decode-l (cdr bits) next-branch)))))
    (decode-l bits tree))
(define (choose-branch bit branch)
    (cond ((= bit 0) (left-branch branch))
          ((= bit 1) (right-branch branch))
          (else (error "bad bit" bit))))
(define (make-leaf-set pairs)
    (if (null? pairs) '()
        (let ((pair (car pairs)))
            (adjoin-set (make-leaf (car pair)
                                   (cadr pair))
                        (make-leaf-set (cdr pairs))))))
;2.67
(define sample-tree
    (make-code-tree (make-leaf 'A 4)
                    (make-code-tree (make-leaf 'B 2)
                                    (make-code-tree (make-leaf 'D 1)
                                                    (make-leaf 'C 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
;(A D A B B C A)
;2.68
(define (element-of-set? x set)
    (cond ((null? set) #f)
          ((equal? x (car set)) #t)
          (else (element-of-set? x (cdr set)))))
(define (encode message tree)
    (if (null? message)
        '()
        (append (encode-symbol (car message) tree)
                (encode (cdr message) tree))))
(define (encode-symbol s tree)
    (define (encode-s s tree)
        (cond ((leaf? tree) '())
            ((element-of-set? s (symbols (left-branch tree)))
                (cons '0 (encode-s s (left-branch tree))))
            (else (cons '1 (encode-s s (right-branch tree))))))
    (if (element-of-set? s (symbols tree))
        (encode-s s tree)
        (error "not exist" s)))

;2.69
(define (generate-huffman-tree pairs)
    (define (successive-merge nodes)
        (if (= 1 (length nodes))
            (car nodes)
            (let ((left (car nodes))
                  (right (cadr nodes))
                  (rest (cddr nodes)))
                 (successive-merge (adjoin-set (make-code-tree left 
                                                               right)
                                               rest)))))
    (successive-merge (make-leaf-set pairs)))
;2.70
(define table (list (list 'A 2) (list 'NA 2) (list 'BOOM 1) (list 'SHA 3)
                    (list 'GET 2) (list 'YIP 9) (list 'JOB 2) (list 'WAH 1)))
;这题没得意思
;2.71 不想做
;2.72 以后做
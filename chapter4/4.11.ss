;4.11
(define (make-frame vars vals)
    (if (null? vars)
        '()
        (cons (cons (car vars) (car vals))
              (make-frame (cdr vars) (cdr vals)))))
(define (first-pair frame) (car frame))
(define (rest-pairs frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
    (cons (cons (var val))
          frame))
(define (lookup-var-val var env)
    (define (scan pairs)
        (cond ((null? pairs)
               (lookup-var-val var (enclosing-environment env)))
              ((eq? (car (first-pair pairs)) var)
               ((cdr (first-pair pairs))))
              (else (scan (rest-pairs pairs)))))
    (if (eq? env the-empty-environment)
        (error "can't find var" var)
        (let ((frame (first-frame env)))
            (scan frame))))
(define (set-var-val! var val env)
    (define (env-loop env)
        (define (scan pairs)
            (let ((cur (first-pair pairs))
                  (rest (rest-pairs pairs)))
                (cond ((null? pairs)
                       (env-loop (enclosing-environment env)))
                      ((eq? (car cur) var)
                       (set-cdr! cur val))
                      (else (scan rest)))))
        (if (eq? the-empty-environment env)
            (error "can't find var" var)
            (scan (first-frame env))))
    (env-loop env))
(define (define-var! var val env)
    (let ((frame (first-frame env)))
        (define (scan pairs)
            (let ((cur (first-pair pairs))
                  (rest (rest-pairs pairs)))
                (cond ((null? pairs)
                       (add-binding-to-frame! var val frame))
                      ((eq? var (car cur))
                       (set-cdr! cur val))
                      (else (scan rest)))))
        (scan frame)))
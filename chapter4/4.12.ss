;4.12
(define (scan-and-do-something env find-op not-find-op var)
    (define (env-loop env)
        (define (scan vars vals)
            (cond ((null? vars)
                   (env-loop (enclosing-environment env)))
                  ((eq? var (car vars))
                   (find-op vals))
                  (else (scan (cdr vars) (cdr vals)))))
        (if (eq? env the-empty-environment)
            (not-find-op)
            (let ((frame (first-frame env)))
                (scan (frame-variables frame)
                      (frame-values frame)))))
    (env-loop env))
(define (set-variable-value! var val env)
    (define (find-op vals) (set-car! vals val))
    (define (not-find-op) (error "cant find var" var))
    (scan-and-do-something env find-op not-find-op var))
(define (define-variable! var val env)
    (let ((new-env (cons (first-env) the-empty-environment)))
        (define (find-op vals) (set-car! vals val))
        (define (not-find-op) (add-binding-to-frame! var val (first-frame new-env)))
        (scan-and-do-something new-env find-op not-find-op var)))
(define (lookup-variable-value var env)
    (define (find-op vals) (car vals))
    (define (not-find-op) (error "cant find var" var))
    (scan-and-do-something env find-op not-find-op var))